// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace theogravity.Fusionauth.Inputs
{

    public sealed class FusionAuthWebhookEventsEnabledArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// When an audit log is created
        /// </summary>
        [Input("auditLogCreate")]
        public Input<bool>? AuditLogCreate { get; set; }

        /// <summary>
        /// When an event log is created
        /// </summary>
        [Input("eventLogCreate")]
        public Input<bool>? EventLogCreate { get; set; }

        /// <summary>
        /// When a JWT RSA Public / Private keypair may have been changed
        /// </summary>
        [Input("jwtPublicKeyUpdate")]
        public Input<bool>? JwtPublicKeyUpdate { get; set; }

        /// <summary>
        /// When an access token is refreshed using a refresh token
        /// </summary>
        [Input("jwtRefresh")]
        public Input<bool>? JwtRefresh { get; set; }

        /// <summary>
        /// When a JWT Refresh Token is revoked
        /// </summary>
        [Input("jwtRefreshTokenRevoke")]
        public Input<bool>? JwtRefreshTokenRevoke { get; set; }

        /// <summary>
        /// When kickstart has successfully completed
        /// </summary>
        [Input("kickstartSuccess")]
        public Input<bool>? KickstartSuccess { get; set; }

        /// <summary>
        /// When a user action is triggered
        /// </summary>
        [Input("userAction")]
        public Input<bool>? UserAction { get; set; }

        /// <summary>
        /// When multiple users are created in bulk (i.e. during an import)
        /// </summary>
        [Input("userBulkCreate")]
        public Input<bool>? UserBulkCreate { get; set; }

        /// <summary>
        /// When a user is created
        /// </summary>
        [Input("userCreate")]
        public Input<bool>? UserCreate { get; set; }

        /// <summary>
        /// When a user create transaction has completed
        /// </summary>
        [Input("userCreateComplete")]
        public Input<bool>? UserCreateComplete { get; set; }

        /// <summary>
        /// When a user is deactivated
        /// </summary>
        [Input("userDeactivate")]
        public Input<bool>? UserDeactivate { get; set; }

        /// <summary>
        /// When a user is deleted
        /// </summary>
        [Input("userDelete")]
        public Input<bool>? UserDelete { get; set; }

        /// <summary>
        /// When a user delete transaction has completed
        /// </summary>
        [Input("userDeleteComplete")]
        public Input<bool>? UserDeleteComplete { get; set; }

        /// <summary>
        /// When a user updates their email address
        /// </summary>
        [Input("userEmailUpdate")]
        public Input<bool>? UserEmailUpdate { get; set; }

        /// <summary>
        /// When a user verifies their email address
        /// </summary>
        [Input("userEmailVerified")]
        public Input<bool>? UserEmailVerified { get; set; }

        /// <summary>
        /// When a user fails a login request
        /// </summary>
        [Input("userLoginFailed")]
        public Input<bool>? UserLoginFailed { get; set; }

        /// <summary>
        /// When a request to create a user with a login Id (email or username) which is already in use has been received
        /// </summary>
        [Input("userLoginIdDuplicateCreate")]
        public Input<bool>? UserLoginIdDuplicateCreate { get; set; }

        /// <summary>
        /// When a request to update a user and change their login Id (email or username) to one that is already in use has been received
        /// </summary>
        [Input("userLoginIdDuplicateUpdate")]
        public Input<bool>? UserLoginIdDuplicateUpdate { get; set; }

        /// <summary>
        /// When a user begins a login request with a new device
        /// </summary>
        [Input("userLoginNewDevice")]
        public Input<bool>? UserLoginNewDevice { get; set; }

        /// <summary>
        /// When a user completes a login request
        /// </summary>
        [Input("userLoginSuccess")]
        public Input<bool>? UserLoginSuccess { get; set; }

        /// <summary>
        /// When a user logs in and is considered to be a potential threat
        /// </summary>
        [Input("userLoginSuspicious")]
        public Input<bool>? UserLoginSuspicious { get; set; }

        /// <summary>
        /// When Reactor detects a user is using a potentially breached password (requires an activated license)
        /// </summary>
        [Input("userPasswordBreach")]
        public Input<bool>? UserPasswordBreach { get; set; }

        /// <summary>
        /// When a forgot password email has been sent to a user
        /// </summary>
        [Input("userPasswordResetSend")]
        public Input<bool>? UserPasswordResetSend { get; set; }

        /// <summary>
        /// When the process to reset a user password has started
        /// </summary>
        [Input("userPasswordResetStart")]
        public Input<bool>? UserPasswordResetStart { get; set; }

        /// <summary>
        /// When a user has successfully reset their password
        /// </summary>
        [Input("userPasswordResetSuccess")]
        public Input<bool>? UserPasswordResetSuccess { get; set; }

        /// <summary>
        /// When a user has updated their password
        /// </summary>
        [Input("userPasswordUpdate")]
        public Input<bool>? UserPasswordUpdate { get; set; }

        /// <summary>
        /// When a user is reactivated
        /// </summary>
        [Input("userReactivate")]
        public Input<bool>? UserReactivate { get; set; }

        /// <summary>
        /// When a user registration is created
        /// </summary>
        [Input("userRegistrationCreate")]
        public Input<bool>? UserRegistrationCreate { get; set; }

        /// <summary>
        /// When a user registration create transaction has completed
        /// </summary>
        [Input("userRegistrationCreateComplete")]
        public Input<bool>? UserRegistrationCreateComplete { get; set; }

        /// <summary>
        /// When a user registration is deleted
        /// </summary>
        [Input("userRegistrationDelete")]
        public Input<bool>? UserRegistrationDelete { get; set; }

        /// <summary>
        /// When a user registration delete transaction has completed
        /// </summary>
        [Input("userRegistrationDeleteComplete")]
        public Input<bool>? UserRegistrationDeleteComplete { get; set; }

        /// <summary>
        /// When a user registration is updated
        /// </summary>
        [Input("userRegistrationUpdate")]
        public Input<bool>? UserRegistrationUpdate { get; set; }

        /// <summary>
        /// When a user registration update transaction has completed
        /// </summary>
        [Input("userRegistrationUpdateComplete")]
        public Input<bool>? UserRegistrationUpdateComplete { get; set; }

        /// <summary>
        /// When a user completes registration verification
        /// </summary>
        [Input("userRegistrationVerified")]
        public Input<bool>? UserRegistrationVerified { get; set; }

        /// <summary>
        /// When a user has added a two-factor method
        /// </summary>
        [Input("userTwoFactorMethodAdd")]
        public Input<bool>? UserTwoFactorMethodAdd { get; set; }

        /// <summary>
        /// When a user has removed a two-factor method
        /// </summary>
        [Input("userTwoFactorMethodRemove")]
        public Input<bool>? UserTwoFactorMethodRemove { get; set; }

        /// <summary>
        /// When a user is updated
        /// </summary>
        [Input("userUpdate")]
        public Input<bool>? UserUpdate { get; set; }

        /// <summary>
        /// When a user update transaction has completed
        /// </summary>
        [Input("userUpdateComplete")]
        public Input<bool>? UserUpdateComplete { get; set; }

        public FusionAuthWebhookEventsEnabledArgs()
        {
        }
    }
}
